#pragma once
#include <cstdint>


/* Do **not** edit this file
 *
 * This file was automatically generated by opcode-cpp.py
 * If you need to just correct some values, please do so by
 * editing opcodes.xml inside opcode-template/
 * If you need to change any logic, change the .jinja template
 * files inside opcode-template/
 */


enum class OpcodePrefix
{
    prefix0 = 0xCB,
    prefix1 = 0x10,
    none = 0x00
};

enum class Opcode : uint8_t
{

    ////////////////////////////////////////////////////////////////////////
    // 8-Bit Loads
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Load 8-Bit Immediate to 8-Bit register
    //----------------------------------------------------------------------
    
    LD_A_8imm = 0x3E, // LD A, {}
    LD_B_8imm = 0x06, // LD B, {}
    LD_C_8imm = 0x0E, // LD C, {}
    LD_D_8imm = 0x16, // LD D, {}
    LD_E_8imm = 0x1E, // LD E, {}
    LD_H_8imm = 0x26, // LD H, {}
    LD_L_8imm = 0x2E, // LD L, {}
    
    //----------------------------------------------------------------------
    // Load 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    LD_A_A = 0x7F, // LD A, A
    LD_A_B = 0x78, // LD A, B
    LD_A_C = 0x79, // LD A, C
    LD_A_D = 0x7A, // LD A, D
    LD_A_E = 0x7B, // LD A, E
    LD_A_H = 0x7C, // LD A, H
    LD_A_L = 0x7D, // LD A, L
    LD_B_A = 0x47, // LD B, A
    LD_B_B = 0x40, // LD B, B
    LD_B_C = 0x41, // LD B, C
    LD_B_D = 0x42, // LD B, D
    LD_B_E = 0x43, // LD B, E
    LD_B_H = 0x44, // LD B, H
    LD_B_L = 0x45, // LD B, L
    LD_C_A = 0x4F, // LD C, A
    LD_C_B = 0x48, // LD C, B
    LD_C_C = 0x49, // LD C, C
    LD_C_D = 0x4A, // LD C, D
    LD_C_E = 0x4B, // LD C, E
    LD_C_H = 0x4C, // LD C, H
    LD_C_L = 0x4D, // LD C, L
    LD_D_A = 0x57, // LD D, A
    LD_D_B = 0x50, // LD D, B
    LD_D_C = 0x51, // LD D, C
    LD_D_D = 0x52, // LD D, D
    LD_D_E = 0x53, // LD D, E
    LD_D_H = 0x54, // LD D, H
    LD_D_L = 0x55, // LD D, L
    LD_E_A = 0x5F, // LD E, A
    LD_E_B = 0x58, // LD E, B
    LD_E_C = 0x59, // LD E, C
    LD_E_D = 0x5A, // LD E, D
    LD_E_E = 0x5B, // LD E, E
    LD_E_H = 0x5C, // LD E, H
    LD_E_L = 0x5D, // LD E, L
    LD_H_A = 0x67, // LD H, A
    LD_H_B = 0x60, // LD H, B
    LD_H_C = 0x61, // LD H, C
    LD_H_D = 0x62, // LD H, D
    LD_H_E = 0x63, // LD H, E
    LD_H_H = 0x64, // LD H, H
    LD_H_L = 0x65, // LD H, L
    LD_L_A = 0x6F, // LD L, A
    LD_L_B = 0x68, // LD L, B
    LD_L_C = 0x69, // LD L, C
    LD_L_D = 0x6A, // LD L, D
    LD_L_E = 0x6B, // LD L, E
    LD_L_H = 0x6C, // LD L, H
    LD_L_L = 0x6D, // LD L, L
    
    //----------------------------------------------------------------------
    // Load byte at HL into 8-Bit register
    //----------------------------------------------------------------------
    
    LD_A_pHL = 0x7E, // LD A, (HL)
    LD_B_pHL = 0x46, // LD B, (HL)
    LD_C_pHL = 0x4E, // LD C, (HL)
    LD_D_pHL = 0x56, // LD D, (HL)
    LD_E_pHL = 0x5E, // LD E, (HL)
    LD_H_pHL = 0x66, // LD H, (HL)
    LD_L_pHL = 0x6E, // LD L, (HL)
    
    //----------------------------------------------------------------------
    // Load 8-Bit value into byte at HL
    //----------------------------------------------------------------------
    
    LD_pHL_B = 0x70, // LD (HL), B
    LD_pHL_C = 0x71, // LD (HL), C
    LD_pHL_D = 0x72, // LD (HL), D
    LD_pHL_E = 0x73, // LD (HL), E
    LD_pHL_H = 0x74, // LD (HL), H
    LD_pHL_L = 0x75, // LD (HL), L
    LD_pHL_8imm = 0x36, // LD (HL), {8imm}
    
    //----------------------------------------------------------------------
    // Loads byte at 16-Bit Register into 8-Bit register
    //----------------------------------------------------------------------
    
    LD_A_pBC = 0x0A, // LD A, (BC)
    LD_A_pDE = 0x1A, // LD A, (DE)
    
    //----------------------------------------------------------------------
    // Loads 8-Bit register into byte at 16-Bit Register
    //----------------------------------------------------------------------
    
    LD_pBC_A = 0x02, // LD (BC), A
    LD_pDE_A = 0x12, // LD (DE), A
    LD_pHL_A = 0x77, // LD (HL), A
    
    //----------------------------------------------------------------------
    // Loads byte at 16-Bit Immediate into 8-Bit Register
    //----------------------------------------------------------------------
    
    LD_A_pp16imm = 0xFA, // LD {r8}, ({p16imm})
    
    //----------------------------------------------------------------------
    // Loads 8-Bit Register into byte at 16-Bit Register
    //----------------------------------------------------------------------
    
    LD_pp16imm_A = 0xEA, // LD ({16imm}), {r8}
    
    //----------------------------------------------------------------------
    // Loads byte at (0xFF00 + 8-Bit Register) into 8-Bit Register
    //----------------------------------------------------------------------
    
    LD_A_pC = 0xF2, // LD {r8out}, ({r16in})
    
    //----------------------------------------------------------------------
    // Loads 8-Bit register into byte at (0xFF00 + 8-Bit Register)
    //----------------------------------------------------------------------
    
    LD_pC_A = 0xE2, // LD ({r8out}), {r8in}
    
    //----------------------------------------------------------------------
    // Loads byte at 16-Bit Register into 8-Bit register. Decrement 16-Bit register
    //----------------------------------------------------------------------
    
    LDD_A_pHL = 0x3A, // LDD {r8}, ({r16})
    
    //----------------------------------------------------------------------
    // Loads 8-Bit register into byte at 16-Bit Register Decrement 16-Bit register
    //----------------------------------------------------------------------
    
    LDD_pHL_A = 0x32, // LDD ({r16}), {r8}
    
    //----------------------------------------------------------------------
    // Loads byte at 16-Bit Register into 8-Bit register. Increment 16-Bit register
    //----------------------------------------------------------------------
    
    LDI_A_pHL = 0x2A, // LDI {r8}, ({r16})
    
    //----------------------------------------------------------------------
    // Loads 8-Bit register into byte at 16-Bit Register Increment 16-Bit register
    //----------------------------------------------------------------------
    
    LDI_pHL_A = 0x22, // LDI ({r16}), {r8}
    
    //----------------------------------------------------------------------
    // Loads byte at (0xFF00 + 8-Bit immediate) into 8-Bit register
    //----------------------------------------------------------------------
    
    LD_A_pp8imm = 0xF0, // LD {r8}, ({8imm})
    
    //----------------------------------------------------------------------
    // Loads 8-Bit register into byte at (0xFF00 + 8-Bit Immediate)
    //----------------------------------------------------------------------
    
    LD_pp8imm_A = 0xE0, // LDI ({8imm}), {r8}
    

    ////////////////////////////////////////////////////////////////////////
    // 16-Bit Loads
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Loads 16-Bit immediate into 16-Bit register
    //----------------------------------------------------------------------
    
    LD_BC_16imm = 0x01, // LD BC, {}
    LD_DE_16imm = 0x11, // LD DE, {}
    LD_HL_16imm = 0x21, // LD HL, {}
    LD_SP_16imm = 0x31, // LD SP, {}
    
    //----------------------------------------------------------------------
    // Loads 16-Bit register into 16-Bit register
    //----------------------------------------------------------------------
    
    LD_SP_HL = 0xF9, // LD {r16out}, {r16in}
    
    //----------------------------------------------------------------------
    // Loads 16-Bit register + 8-Bit immediate into 16-Bit register
    //----------------------------------------------------------------------
    
    LD_HL_SP_8imm = 0xF8, // LD{r16out} {r16in}, {8imm}
    
    //----------------------------------------------------------------------
    // Loads 16-Bit register into memory at 16-Bit immediate
    //----------------------------------------------------------------------
    
    LD_pp16imm_SP = 0x08, // LD ({16imm}), {r16}
    
    //----------------------------------------------------------------------
    // Push 16-Bit register onto stack. Decrememt SP twice
    //----------------------------------------------------------------------
    
    PUSH_AF = 0xF5, // PUSH AF
    PUSH_BC = 0xC5, // PUSH BC
    PUSH_DE = 0xD5, // PUSH DE
    PUSH_HL = 0xE5, // PUSH HL
    
    //----------------------------------------------------------------------
    // Pop 16-Bit off stack into 16-Bit register. Incrememt SP twice
    //----------------------------------------------------------------------
    
    POP_AF = 0xF1, // POP AF
    POP_BC = 0xC1, // POP BC
    POP_DE = 0xD1, // POP DE
    POP_HL = 0xE1, // POP HL
    

    ////////////////////////////////////////////////////////////////////////
    // 8-Bit ALU
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Add 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    ADD_A_A = 0x87, // ADD {}, A
    ADD_A_B = 0x80, // ADD {}, B
    ADD_A_C = 0x81, // ADD {}, C
    ADD_A_D = 0x82, // ADD {}, D
    ADD_A_E = 0x83, // ADD {}, E
    ADD_A_H = 0x84, // ADD {}, H
    ADD_A_L = 0x85, // ADD {}, L
    
    //----------------------------------------------------------------------
    // Add 8-Bit at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    ADD_A_pHL = 0x86, // ADD {r8out}, ({r16in})
    
    //----------------------------------------------------------------------
    // Add 8-Bit immediate into 8-Bit register
    //----------------------------------------------------------------------
    
    ADD_A_8imm = 0xC6, // ADD {r8}, {8imm}
    
    //----------------------------------------------------------------------
    // Add 8-Bit register + carry flag into 8-Bit register
    //----------------------------------------------------------------------
    
    ADC_A_A = 0x8F, // ADC {}, A
    ADC_A_B = 0x88, // ADC {}, B
    ADC_A_C = 0x89, // ADC {}, C
    ADC_A_D = 0x8A, // ADC {}, D
    ADC_A_E = 0x8B, // ADC {}, E
    ADC_A_H = 0x8C, // ADC {}, H
    ADC_A_L = 0x8D, // ADC {}, L
    
    //----------------------------------------------------------------------
    // Add 8-Bit + carry flag at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    ADC_A_pHL = 0x8E, // ADC {r8out}, ({r16in})
    
    //----------------------------------------------------------------------
    // Add 8-Bit immediate + carry flag into 8-Bit register
    //----------------------------------------------------------------------
    
    ADC_A_8imm = 0xCE, // ADC {r8}, {8imm}
    
    //----------------------------------------------------------------------
    // Subtracts 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    SUB_A_A = 0x97, // SUB {}, A
    SUB_A_B = 0x90, // SUB {}, B
    SUB_A_C = 0x91, // SUB {}, C
    SUB_A_D = 0x92, // SUB {}, D
    SUB_A_E = 0x93, // SUB {}, E
    SUB_A_H = 0x94, // SUB {}, H
    SUB_A_L = 0x95, // SUB {}, L
    
    //----------------------------------------------------------------------
    // Subtracts 8-Bit at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    SUB_A_pHL = 0x96, // SUB {r8out}, ({r16in})
    
    //----------------------------------------------------------------------
    // Subtracts 8-Bit immediate into 8-Bit register
    //----------------------------------------------------------------------
    
    SUB_A_8imm = 0xD6, // SUB {r8}, {8imm}
    
    //----------------------------------------------------------------------
    // Subtracts 8-Bit register + carry flag into 8-Bit register
    //----------------------------------------------------------------------
    
    SBC_A_A = 0x9F, // SBC {}, A
    SBC_A_B = 0x98, // SBC {}, B
    SBC_A_C = 0x99, // SBC {}, C
    SBC_A_D = 0x9A, // SBC {}, D
    SBC_A_E = 0x9B, // SBC {}, E
    SBC_A_H = 0x9C, // SBC {}, H
    SBC_A_L = 0x9D, // SBC {}, L
    
    //----------------------------------------------------------------------
    // Subtracts 8-Bit + carry flag at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    SBC_A_pHL = 0x9E, // SBC {r8out}, ({r16in})
    
    //----------------------------------------------------------------------
    // Subtracts 8-Bit immediate + carry flag into 8-Bit register
    //----------------------------------------------------------------------
    
    SBC_A_8imm = 0xDE, // SBC {r8}, {8imm}
    
    //----------------------------------------------------------------------
    // Logically ANDs 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    AND_A = 0xA7, // AND A
    AND_B = 0xA0, // AND B
    AND_C = 0xA1, // AND C
    AND_D = 0xA2, // AND D
    AND_E = 0xA3, // AND E
    AND_H = 0xA4, // AND H
    AND_L = 0xA5, // AND L
    
    //----------------------------------------------------------------------
    // Logically ANDs 8-Bit at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    AND_pHL = 0xA6, // AND ({r16})
    
    //----------------------------------------------------------------------
    // Logically ANDs 8-Bit immediate into 8-Bit register
    //----------------------------------------------------------------------
    
    AND_8imm = 0xE6, // AND {8imm}
    
    //----------------------------------------------------------------------
    // Logically ORs 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    OR_A = 0xB7, // OR A
    OR_B = 0xB0, // OR B
    OR_C = 0xB1, // OR C
    OR_D = 0xB2, // OR D
    OR_E = 0xB3, // OR E
    OR_H = 0xB4, // OR H
    OR_L = 0xB5, // OR L
    
    //----------------------------------------------------------------------
    // Logically ORs 8-Bit at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    OR_pHL = 0xB6, // OR ({r16})
    
    //----------------------------------------------------------------------
    // Logically ORs 8-Bit immediate into 8-Bit register
    //----------------------------------------------------------------------
    
    OR_8imm = 0xF6, // OR {8imm}
    
    //----------------------------------------------------------------------
    // Logically XORs 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    XOR_A = 0xAF, // XOR A
    XOR_B = 0xA8, // XOR B
    XOR_C = 0xA9, // XOR C
    XOR_D = 0xAA, // XOR D
    XOR_E = 0xAB, // XOR E
    XOR_H = 0xAC, // XOR H
    XOR_L = 0xAD, // XOR L
    
    //----------------------------------------------------------------------
    // Logically XORs 8-Bit at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    XOR_pHL = 0xAE, // XOR ({r16})
    
    //----------------------------------------------------------------------
    // Logically XORs 8-Bit immediate into 8-Bit register
    //----------------------------------------------------------------------
    
    XOR_8imm = 0xEE, // XOR {8imm}
    
    //----------------------------------------------------------------------
    // Compares 8-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    CP_A = 0xBF, // CP A
    CP_B = 0xB8, // CP B
    CP_C = 0xB9, // CP C
    CP_D = 0xBA, // CP D
    CP_E = 0xBB, // CP E
    CP_H = 0xBC, // CP H
    CP_L = 0xBD, // CP L
    
    //----------------------------------------------------------------------
    // Compares 8-Bit at 16-Bit register into 8-Bit register
    //----------------------------------------------------------------------
    
    CP_pHL = 0xBE, // CP ({r16})
    
    //----------------------------------------------------------------------
    // Compares 8-Bit immediate into 8-Bit register
    //----------------------------------------------------------------------
    
    CP_8imm = 0xFE, // CP {8imm}
    
    //----------------------------------------------------------------------
    // Increments 8-Bit register
    //----------------------------------------------------------------------
    
    INC_A = 0x3C, // INC A
    INC_B = 0x04, // INC B
    INC_C = 0x0C, // INC C
    INC_D = 0x14, // INC D
    INC_E = 0x1C, // INC E
    INC_H = 0x24, // INC H
    INC_L = 0x2C, // INC L
    
    //----------------------------------------------------------------------
    // Increments value at 16-Bit register
    //----------------------------------------------------------------------
    
    INC_pHL = 0x34, // INC ({r16})
    
    //----------------------------------------------------------------------
    // Decrements 8-Bit register
    //----------------------------------------------------------------------
    
    DEC_A = 0x3D, // DEC A
    DEC_B = 0x05, // DEC B
    DEC_C = 0x0D, // DEC C
    DEC_D = 0x15, // DEC D
    DEC_E = 0x1D, // DEC E
    DEC_H = 0x25, // DEC H
    DEC_L = 0x2D, // DEC L
    
    //----------------------------------------------------------------------
    // Decrements value at 16-Bit register
    //----------------------------------------------------------------------
    
    DEC_pHL = 0x35, // DEC ({r16})
    

    ////////////////////////////////////////////////////////////////////////
    // 16-Bit ALU
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Add two 16-Bit Registers
    //----------------------------------------------------------------------
    
    ADD_HL_BC = 0x09, // ADD {}, BC
    ADD_HL_DE = 0x19, // ADD {}, DE
    ADD_HL_HL = 0x29, // ADD {}, HL
    ADD_HL_SP = 0x39, // ADD {}, SP
    
    //----------------------------------------------------------------------
    // Add 8-Bit immediate to 16-Bit register
    //----------------------------------------------------------------------
    
    ADD_SP_8imm = 0xE8, // ADD {r16}, {8imm}
    
    //----------------------------------------------------------------------
    // Increments 16-Bit Registers
    //----------------------------------------------------------------------
    
    INC_BC = 0x03, // INC BC
    INC_DE = 0x13, // INC DE
    INC_HL = 0x23, // INC HL
    INC_SP = 0x33, // INC SP
    
    //----------------------------------------------------------------------
    // Decrements 16-Bit Registers
    //----------------------------------------------------------------------
    
    DEC_BC = 0x0B, // DEC BC
    DEC_DE = 0x1B, // DEC DE
    DEC_HL = 0x2B, // DEC HL
    DEC_SP = 0x3B, // DEC SP
    

    ////////////////////////////////////////////////////////////////////////
    // Miscellaneous
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Swap upper and lower nibles of 8-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Swap upper and lower nibles of memory at 16-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Decimal adjust register A so that the correct BCD is obtained
    //----------------------------------------------------------------------
    
    DAA = 0x27, // DAA
    
    //----------------------------------------------------------------------
    // Complement A register (flip all bits)
    //----------------------------------------------------------------------
    
    CPL = 0x2F, // CPL
    
    //----------------------------------------------------------------------
    // Complement carry flag (C = !C)
    //----------------------------------------------------------------------
    
    CCF = 0x3F, // CCF
    
    //----------------------------------------------------------------------
    // Set carry flag
    //----------------------------------------------------------------------
    
    SCF = 0x37, // SCF
    
    //----------------------------------------------------------------------
    // No operation
    //----------------------------------------------------------------------
    
    NOP = 0x00, // NOP
    
    //----------------------------------------------------------------------
    // Halt CPU until interrupt
    //----------------------------------------------------------------------
    
    HALT = 0x76, // HALT
    
    //----------------------------------------------------------------------
    // Halt CPU and LCD Display until button pressed
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Disable interrupt
    //----------------------------------------------------------------------
    
    DI = 0xF3, // DI
    
    //----------------------------------------------------------------------
    // Enable interrupt
    //----------------------------------------------------------------------
    
    EI = 0xFB, // EI
    

    ////////////////////////////////////////////////////////////////////////
    // Rotates and Shifts
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Rotate A left. Old bit 7 to Carry flag
    //----------------------------------------------------------------------
    
    RLCA = 0x07, // RLCA
    
    //----------------------------------------------------------------------
    // Rotate A left through Carry Flag
    //----------------------------------------------------------------------
    
    RLA = 0x17, // RLA
    
    //----------------------------------------------------------------------
    // Rotate A right. Old bit 7 to Carry flag
    //----------------------------------------------------------------------
    
    RRCA = 0x0F, // RRCA
    
    //----------------------------------------------------------------------
    // Rotate A right through Carry Flag
    //----------------------------------------------------------------------
    
    RRA = 0x1F, // RRA
    
    //----------------------------------------------------------------------
    // Rotate 8-Bit register left. Old bit 7 to Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate memory at 16-Bit register left. Old bit 7 to Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate 8-Bit register left through Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate memory at 16-Bit register left through Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate 8-Bit register right. Old bit 7 to Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate memory at 16-Bit register right. Old bit 7 to Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate 8-Bit register right through Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Rotate memory at 16-Bit register right through Carry Flag
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Shift 8-Bit register left into Carry Flag. LSB set to 0
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Shift memory at 16-Bit register left into Carry Flag. LSB set to 0
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Shift 8-Bit register right into Carry Flag. MSB doesn't change
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Shift memory at 16-Bit register right into Carry Flag. MSB doesn't change
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Shift 8-Bit register right into Carry Flag. MSB set to 0
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Shift memory at 16-Bit register right into Carry Flag. MSB set to 0
    //----------------------------------------------------------------------
    
    

    ////////////////////////////////////////////////////////////////////////
    // Bit Opcodes
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Test bit b in 8-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Test bit b in memory at 16-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Set bit b in 8-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // set bit b in memory at 16-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Reset bit b in 8-Bit register
    //----------------------------------------------------------------------
    
    
    //----------------------------------------------------------------------
    // Reset bit b in memory at 16-Bit register
    //----------------------------------------------------------------------
    
    

    ////////////////////////////////////////////////////////////////////////
    // Jumps
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Jump to address in 16-Bit immediate
    //----------------------------------------------------------------------
    
    JP_16imm = 0xC3, // JP {16imm}
    JP_NZ_16imm = 0xC2, // JP NZ, {}
    JP_Z_16imm = 0xCA, // JP Z, {}
    JP_NC_16imm = 0xD2, // JP NC, {}
    JP_C_16imm = 0xDA, // JP C, {}
    JP_HL = 0xE9, // JP ({r16})
    
    //----------------------------------------------------------------------
    // Jump to address relative to current address
    //----------------------------------------------------------------------
    
    JP_8imm = 0x18, // JP {8imm}
    JP_NZ_8imm = 0x20, // JP NZ, {}
    JP_Z_8imm = 0x28, // JP Z, {}
    JP_NC_8imm = 0x30, // JP NC, {}
    JP_C_8imm = 0x38, // JP C, {}
    

    ////////////////////////////////////////////////////////////////////////
    // Calls
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Push address of nexus instruction onto stack and then jump to address
    //----------------------------------------------------------------------
    
    CALL_16imm = 0xCD, // CALL {16imm}
    CALL_NZ_16imm = 0xC4, // CALL NZ, {8imm}
    CALL_Z_16imm = 0xCC, // CALL Z, {8imm}
    CALL_NC_16imm = 0xD4, // CALL NC, {8imm}
    CALL_C_16imm = 0xDC, // CALL C, {8imm}
    

    ////////////////////////////////////////////////////////////////////////
    // Returns
    ////////////////////////////////////////////////////////////////////////
    
    //----------------------------------------------------------------------
    // Pop two bytes from stack and jump to that address
    //----------------------------------------------------------------------
    
    RET = 0xC9, // RET
    RETI = 0xD9, // RETI
    RET_NZ = 0xC0, // RET NZ
    RET_Z = 0xC8, // RET Z
    RET_NC = 0xD0, // RET NC
    RET_C = 0xD8, // RET C
    

};