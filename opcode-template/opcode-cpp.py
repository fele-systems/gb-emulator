#!/usr/bin/python3
import xml.etree.ElementTree as ET
import argparse
import logging
import pprint
import sys
from jinja2 import Environment, FileSystemLoader, select_autoescape
from kinds import Category

notice = """
/* Do **not** edit this file
 *
 * This file was automatically generated by opcode-cpp.py
 * If you need to just correct some values, please do so by
 * editing opcodes.xml inside opcode-template/
 * If you need to change any logic, change the .jinja template
 * files inside opcode-template/
 */
"""

def main():
    parser = argparse.ArgumentParser(
            description='Opcode code generator for gb-emulator')
    parser.add_argument('-d', '--dryrun',
                        action='store_true')

    parser.add_argument('-e', '--enumout',
                        type=str,
                        default='include/opcodes-autogen.h')
    parser.add_argument('-s', '--switchout',
                        type=str,
                        default='src/call_switch-autogen.cpp')
    parser.add_argument('-E', '--evaluate',
                        type=str)

    args = parser.parse_args()
    tree = ET.parse("opcodes.xml")
    root = tree.getroot()
    FORMAT = "[%(filename)s:%(lineno)3s - %(funcName)10s()] "\
             "[%(levelname)s] %(message)s"
    logging.basicConfig(format=FORMAT, level=logging.WARNING)

    env = Environment(
        loader=FileSystemLoader('.'),
        autoescape=select_autoescape()
    )

    categories = []
    for category in [Category.parse(cat) for cat in root]:
        categories.append(category)

    if args.dryrun:
        pp = pprint.PrettyPrinter(indent=4)
        for category in categories:
            for sc in category.subcat:
                for i in sc.opcodes:
                    pp.pprint(vars(i))
        return
    elif args.evaluate is not None:
        env.get_template(args.evaluate) \
            .stream(categories=categories,notice=notice) \
            .dump(sys.stdout)
        return

    env.get_template("opcodes.h.jinja") \
        .stream(categories=categories,notice=notice) \
        .dump(args.enumout)
    env.get_template("call_switch.cpp.jinja") \
        .stream(categories=categories,notice=notice) \
        .dump(args.switchout)


if __name__ == "__main__":
    main()
