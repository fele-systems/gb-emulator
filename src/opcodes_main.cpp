#include <fmt/core.h>
#include <nlohmann/detail/macro_scope.hpp>
#include <nlohmann/json_fwd.hpp>
#include <opcode.h>
#include <iostream>
#include <string>
#include <iomanip>
#include <inja/inja.hpp>
#include <fele_utils.h>
#include <fstream>

static auto notice = R"(/* Do **not** edit this file
 *
 * This file was automatically generated by opcode-cpp.py
 * If you need to just correct some values, please do so by
 * editing opcodes.xml inside opcode-template/
 * If you need to change any logic, change the .jinja template
 * files inside opcode-template/
 */
)";

NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Argument, name, kind, size);

inline void to_json(nlohmann::json& json, const Opcode& opcode)
{
    using namespace std::string_literals;

    json["instruction"] = opcode.instruction;
    json["value"] = opcode.value;
    json["extended"] = opcode.extended;
    json["cycles"] = opcode.cycles;
    json["format"] = opcode.format;
    json["size"] = opcode.size;
    json["arguments"] = opcode.arguments;
    json["enum"] = opcode.to_enum_str();
    json["to_string"] = opcode.instruction + ' ' + fele::join(", "s, [](const auto& arg)
    {
        return arg.name;
    }, opcode.arguments.begin(), opcode.arguments.end());
}

inline void from_json(const nlohmann::json& nlohmann_json_j, Opcode& nlohmann_json_t) {}

NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(OpcodeCategory, function_name, brief, opcodes);

int main()
{
    using namespace std::string_literals;
    inja::Environment env;

    env.add_callback("hex", 1, [](inja::Arguments& args) {
        return fmt::format("{:#04x}", args[0]->get<int>());
    });

    auto templ = env.parse_template("include/opcodes.h.jinja");
    
    OpcodeManager manager = OpcodeManager::load_from_file("opcode-template/xml-pretty-print.xml");

    nlohmann::json data;
    nlohmann::to_json(data["categories"], manager.get_categories());
    data["notice"] = notice;

    std::ofstream output_file { "include/opcodes.h", std::ios_base::trunc };
    env.render_to(output_file, templ, data);
    
    return 0;
}
